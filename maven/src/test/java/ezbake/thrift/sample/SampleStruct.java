/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.thrift.sample;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SampleStruct implements org.apache.thrift.TBase<SampleStruct, SampleStruct._Fields>, java.io.Serializable, Cloneable, Comparable<SampleStruct> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SampleStruct");

    private static final org.apache.thrift.protocol.TField MY_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("myInt", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MY_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("myString", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new SampleStructStandardSchemeFactory());
        schemes.put(TupleScheme.class, new SampleStructTupleSchemeFactory());
    }

    public int myInt; // required
    public String myString; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        MY_INT((short)1, "myInt"),
        MY_STRING((short)2, "myString");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // MY_INT
                    return MY_INT;
                case 2: // MY_STRING
                    return MY_STRING;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __MYINT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.MY_INT, new org.apache.thrift.meta_data.FieldMetaData("myInt", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.MY_STRING, new org.apache.thrift.meta_data.FieldMetaData("myString", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SampleStruct.class, metaDataMap);
    }

    public SampleStruct() {
    }

    public SampleStruct(
            int myInt,
            String myString)
    {
        this();
        this.myInt = myInt;
        setMyIntIsSet(true);
        this.myString = myString;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SampleStruct(SampleStruct other) {
        __isset_bitfield = other.__isset_bitfield;
        this.myInt = other.myInt;
        if (other.isSetMyString()) {
            this.myString = other.myString;
        }
    }

    public SampleStruct deepCopy() {
        return new SampleStruct(this);
    }

    @Override
    public void clear() {
        setMyIntIsSet(false);
        this.myInt = 0;
        this.myString = null;
    }

    public int getMyInt() {
        return this.myInt;
    }

    public SampleStruct setMyInt(int myInt) {
        this.myInt = myInt;
        setMyIntIsSet(true);
        return this;
    }

    public void unsetMyInt() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYINT_ISSET_ID);
    }

    /** Returns true if field myInt is set (has been assigned a value) and false otherwise */
    public boolean isSetMyInt() {
        return EncodingUtils.testBit(__isset_bitfield, __MYINT_ISSET_ID);
    }

    public void setMyIntIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYINT_ISSET_ID, value);
    }

    public String getMyString() {
        return this.myString;
    }

    public SampleStruct setMyString(String myString) {
        this.myString = myString;
        return this;
    }

    public void unsetMyString() {
        this.myString = null;
    }

    /** Returns true if field myString is set (has been assigned a value) and false otherwise */
    public boolean isSetMyString() {
        return this.myString != null;
    }

    public void setMyStringIsSet(boolean value) {
        if (!value) {
            this.myString = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case MY_INT:
                if (value == null) {
                    unsetMyInt();
                } else {
                    setMyInt((Integer)value);
                }
                break;

            case MY_STRING:
                if (value == null) {
                    unsetMyString();
                } else {
                    setMyString((String)value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case MY_INT:
                return Integer.valueOf(getMyInt());

            case MY_STRING:
                return getMyString();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case MY_INT:
                return isSetMyInt();
            case MY_STRING:
                return isSetMyString();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof SampleStruct)
            return this.equals((SampleStruct)that);
        return false;
    }

    public boolean equals(SampleStruct that) {
        if (that == null)
            return false;

        boolean this_present_myInt = true;
        boolean that_present_myInt = true;
        if (this_present_myInt || that_present_myInt) {
            if (!(this_present_myInt && that_present_myInt))
                return false;
            if (this.myInt != that.myInt)
                return false;
        }

        boolean this_present_myString = true && this.isSetMyString();
        boolean that_present_myString = true && that.isSetMyString();
        if (this_present_myString || that_present_myString) {
            if (!(this_present_myString && that_present_myString))
                return false;
            if (!this.myString.equals(that.myString))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public int compareTo(SampleStruct other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetMyInt()).compareTo(other.isSetMyInt());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMyInt()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myInt, other.myInt);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMyString()).compareTo(other.isSetMyString());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMyString()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myString, other.myString);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SampleStruct(");
        boolean first = true;

        sb.append("myInt:");
        sb.append(this.myInt);
        first = false;
        if (!first) sb.append(", ");
        sb.append("myString:");
        if (this.myString == null) {
            sb.append("null");
        } else {
            sb.append(this.myString);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SampleStructStandardSchemeFactory implements SchemeFactory {
        public SampleStructStandardScheme getScheme() {
            return new SampleStructStandardScheme();
        }
    }

    private static class SampleStructStandardScheme extends StandardScheme<SampleStruct> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, SampleStruct struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // MY_INT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.myInt = iprot.readI32();
                            struct.setMyIntIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // MY_STRING
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.myString = iprot.readString();
                            struct.setMyStringIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, SampleStruct struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(MY_INT_FIELD_DESC);
            oprot.writeI32(struct.myInt);
            oprot.writeFieldEnd();
            if (struct.myString != null) {
                oprot.writeFieldBegin(MY_STRING_FIELD_DESC);
                oprot.writeString(struct.myString);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SampleStructTupleSchemeFactory implements SchemeFactory {
        public SampleStructTupleScheme getScheme() {
            return new SampleStructTupleScheme();
        }
    }

    private static class SampleStructTupleScheme extends TupleScheme<SampleStruct> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SampleStruct struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetMyInt()) {
                optionals.set(0);
            }
            if (struct.isSetMyString()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetMyInt()) {
                oprot.writeI32(struct.myInt);
            }
            if (struct.isSetMyString()) {
                oprot.writeString(struct.myString);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SampleStruct struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.myInt = iprot.readI32();
                struct.setMyIntIsSet(true);
            }
            if (incoming.get(1)) {
                struct.myString = iprot.readString();
                struct.setMyStringIsSet(true);
            }
        }
    }

}

